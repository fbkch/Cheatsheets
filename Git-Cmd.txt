[*] Configuration:
	
	- Configure local git:
		git config --global user.name "my username"
		git config --global user.email "myemail@test.com"
		git config --global --list

	- Text Editor Install and Configure:
		notepad++ # testing to make sure it works
		notepad++ .bashrc # see contents of .bashrc file below
		npp # testing npp alias
		git config --global core.editor "notepad++.exe -multiInst -nosession"
		npp .gitconfig # open Git config file, should contain snip below

		~/.bashrc File
		alias npp='notepad++.exe -multiInst -nosession'

		~/.gitconfig File
		[core]
			editor = notepad++.exe -multiInst -nosession

[*] Workflow

	- Express Commit:
		git status
		git commit -am "Adding more ipsum text"
		git ls-files

	- Recursive Add:
		git add .

	- Backing Out Changes
		git reset HEAD my-file.txt
		git checkout -- my-file.txt

	- Deleting Files:
		git rm newfile.txt

	- History:
		git help log
		git log
		git log --abbrev-commit
		git log --oneline --graph --decorate
		git log --since="3 days ago"

	- Git Alias:
		git config --global alias.hist "log --all --graph --decorate --oneline"
		git hist

	- Git Basics Cleanup:
		git status
		git pull origin master
		git push origin master


[*] Merge Tool

	- Windows: P4Merge for Windows
		git config --global merge.tool p4merge
		git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
		git config --global diff.tool p4merge
		git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
		git config --global difftool.prompt false
		git config --global mergetool.prompt false

	- Mac OS X: P4Merge for Mac
		git config --global mergetool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge
		git config --global merge.tool p4merge
		git config --global difftool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge
		git config --global diff.tool p4merge
		git config --global difftool.prompt false
		git config --global mergetool.prompt false


[*] Git Stashing

	- Basics:
		git status
		git stash
		git stash apply
		git stash list
		git stash drop
		git stash pop

	- Managing Multiple Stashes:
		git stash list
		git stash show stash@{1}
		git stash apply stash@{1}
		git stash drop stash@{1}

	- Stashing into a Branch:
		git status
		git stash -u
		git stash branch newchanges
		git stash list
		*do modifs*
		git add .
		git status
		git commit
		git checkout master
		git merge newchanges
		git branch -d newchanges
		git branch


[*] Git Tagging

	- Simple Tagging Example:
		git log --oneline --decorate --graph --all
		git tag myTag
		git tag --list
		git show myTag
		git tag --list
		git tag --delete myTag

	- Annotated Tags:
		git tag -a v-1.0
		git tag --list
		git log --oneline --decorate --graph --all
		git show v-1.0

	- Comparing Tags:
		git commit -a
		git log --oneline --decorate --graph --all
		git tag -a v-1.1
		*do modifs*
		git commit -am "Updating for tag 1.1"
		git commit --amend
		git tag v-1.2 -m "Release 1.2"
		git tag --list
		git log --oneline --decorate --graph --all
		git diff v-1.0 v-1.2
		git difftool v-1.0 v-1.2

	- Tagging a Specific Comment:
		git status
		git log --oneline --decorate --graph --all
		git tag -a v-0.9-beta 12ab34c

	- Updating a Tag:
		git status
		git log --oneline --decorate --graph --all
		git tag -a v-0.8-alpha -f 12ab34c

	- Remote Tagging (GitHub):
		git status
		git tag --list
		git log --oneline --decorate --graph --all
		git push origin v-0.9-beta
		git push origin v-1.1
		
		git push origin master --tags
		git push origin :v-0.8-alpha

[*] Comparison

	- Comparing Working Directory and the Staging Area:
		git diff
		git difftool

	- Comparing Working Directory and Git Repository (last commit):
		git diff HEAD
		git difftool HEAD

	- Comparing the Staging Area and Git Repository
		git diff --staged HEAD
		git difftool --staged HEAD

	- Looking for Comparison in only one file:
		git diff -- myfile.txt
		git difftool -- myfile.txt

	- Comparing HEAD and one commit before HEAD
		git diff HEAD HEAD^

	- Comparing Local and Remote master branch:
		git diff master origin/master  


[*] Branching and Merging

	- Branching Basics:
		git branch -a
		git branch my-new-branch
		git checkout my-new-branch
		git checkout master
		git branch -m my-new-branch new-name-branch

	- Fast Forward Merge:
		git checkout -b new-branch
		git commit -am "modifs on new branch"
		git log --oneline
		git checkout master
		git diff master new-branch
		git difftool master new-branch
		git merge new-branch
		git branch -d new-branch

	- Merge with No Fast Forward:
		git merge new-branch --no-ff

	- Merge with commit message:
		git merge new-branch -m "my message"

	- Conflicting Merge:
		git mergetool


[*] Rebasing

	- Rebase my-new-branch with master branch:
		git checkout my-new-branch
		git rebase master

	- Abort Rebase:
		git rebase --abort

	- Rebase Conflict and Resolution:
		git rebase master
		git mergetool
		git rebase --continue

	- Pull with Rebase:
		git fetch origin master
		git pull --rebase origin master


[*] Reset and Reflog

	- Reset:
		git reset HEAD^
		git reflog
		git reset 123abcd
		git reset HEAD@{3}

	- Cherry Pick:
		git log --oneline --decorate --graph --all
		git cherry-pick 123abcd


[*] Pull request (Github)
	
	- Fork Repository
	- Create new branch
	- Do the modifs and commit
	- Push to the branch in Github Repo
	- Click "Compare and Pull request" (in GitHub)
	- Merge Pull Request (for owner of the repository)